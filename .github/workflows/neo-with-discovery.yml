name: NEO with Discovery Pipeline

on:
  workflow_dispatch:
    inputs:
      TriggerManifest:
        description: 'Trigger manifest artifact (in JSON format) for the current pipeline run.'
        required: true
        type: string
      TriggeredBy:
        description: 'Name of LifeTime user that triggered the pipeline remotely.'
        required: false
        type: string

env:
  ArtifactsFolder: "Artifacts"
  ManifestFolder: "trigger_manifest"
  ManifestFile: "trigger_manifest.json"
  LifeTimeHostname: 'showcase-lt.outsystemsdevopsexperts.com'
  LifeTimeAPIVersion: 2
  AuthorizationToken: ${{ secrets.LIFETIME_SERVICE_ACCOUNT_TOKEN }}
  DiscoveryAPIKey: ${{ secrets.LIFETIME_DISCOVERY_API_KEY }}
  DiscoveryAPIURL: 'https://showcase-dev.outsystemsdevopsexperts.com/Discovery_API/rest/Utility/AllApplications'
  DevelopmentEnvironmentLabel: 'Development'
  RegressionEnvironmentLabel: 'Regression'
  AcceptanceEnvironmentLabel: 'Acceptance'
  PreProductionEnvironmentLabel: 'Pre-Production'
  ProductionEnvironmentLabel: 'Production'
  CICDProbeEnvironmentURL: 'https://showcase-reg.outsystemsdevopsexperts.com/'
  BDDFrameworkEnvironmentURL: 'https://showcase-reg.outsystemsdevopsexperts.com/'
  OSPackageVersion: '0.9.0'

jobs:
  check_discovery_findings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Create artifacts folder
        run: mkdir -p ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Write trigger manifest content to a file
        run: echo '${{ github.event.inputs.TriggerManifest }}' > ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}
        
      - name: Check for discovery findings
        run: |
          python -c "
          import json
          with open('${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}') as f:
              data = json.load(f)
          applications = [app['ApplicationName'] for app in data['ApplicationVersions']]
          with open('applications.json', 'w') as f:
              json.dump(applications, f)
          "
      
      - name: Run findings check script
        run: |
          python check_discovery_findings.py "${{ env.DiscoveryAPIURL }}" "${{ env.DiscoveryAPIKey }}" "$(cat applications.json)"

  get_and_deploy_latest_tags:
    runs-on: ubuntu-latest
    needs: check_discovery_findings
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Create artifacts folder
        run: mkdir -p ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Write trigger manifest content to a file
        run: echo '${{ github.event.inputs.TriggerManifest }}' > ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}

      - name: Deploy latest application tags (including tests) to Regression
        run: |
          python3 -m outsystems.pipeline.deploy_tags_to_target_env_with_manifest \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --lt_api_version ${{ env.LifeTimeAPIVersion }} \
            --source_env_label ${{ env.DevelopmentEnvironmentLabel }} \
            --destination_env_label ${{ env.RegressionEnvironmentLabel }} \
            --include_test_apps \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Apply values to configuration items in Regression
        run: |
          python3 -m outsystems.pipeline.apply_configuration_values_to_target_env \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --target_env_label "${{ env.RegressionEnvironmentLabel }}" \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Stash trigger manifest
        uses: actions/upload-artifact@v2
        with:
          name: trigger_manifest
          path: ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}

      - name: Archive deployment conflicts on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: DeploymentConflicts
          path: ${{ env.ArtifactsFolder }}/DeploymentConflicts

  run_regression:
    runs-on: ubuntu-latest
    needs: get_and_deploy_latest_tags
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifacts folder
        run: mkdir ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Unstash trigger manifest
        uses: actions/download-artifact@v2
        with:
          name: trigger_manifest
          path: ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}

      - name: Generate URL endpoints for BDD test suites
        run: |
          python3 /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/outsystems/pipeline/scan_test_endpoints.py \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}" \
            --cicd_probe_env ${{ env.CICDProbeEnvironmentURL }} \
            --bdd_framework_env ${{ env.BDDFrameworkEnvironmentURL }} 

      - name: Run BDD test suites and generate JUnit test report
        run: |
          python3 -m outsystems.pipeline.evaluate_test_results \
            --artifacts "${{ env.ArtifactsFolder }}"

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_run: false
          comment_mode: off
          ignore_runs: true
          files: |
            ${{ env.ArtifactsFolder }}/junit-result.xml

  deploy-acceptance:
    runs-on: ubuntu-latest
    needs: run_regression
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifacts folder
        run: mkdir ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Unstash trigger manifest
        uses: actions/download-artifact@v2
        with:
          name: trigger_manifest
          path: ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}

      - name: Deploy latest application tags Acceptance
        run: |
          python3 -m outsystems.pipeline.deploy_tags_to_target_env_with_manifest \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --lt_api_version ${{ env.LifeTimeAPIVersion }} \
            --source_env_label ${{ env.RegressionEnvironmentLabel  }} \
            --destination_env_label ${{ env.AcceptanceEnvironmentLabel  }} \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Apply values to configuration items in Acceptance
        run: |
          python3 -m outsystems.pipeline.apply_configuration_values_to_target_env \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --target_env_label "${{ env.AcceptanceEnvironmentLabel }}" \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Archive deployment conflicts on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: DeploymentConflicts
          path: ${{ env.ArtifactsFolder }}/DeploymentConflicts

  deploy-dry-run:
    runs-on: ubuntu-latest
    needs: deploy-acceptance
    environment: pre-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifacts folder
        run: mkdir ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Unstash trigger manifest
        uses: actions/download-artifact@v2
        with:
          name: trigger_manifest
          path: ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}

      - name: Deploy latest application to Pre-Production
        run: |
          python3 -m outsystems.pipeline.deploy_tags_to_target_env_with_manifest \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --lt_api_version ${{ env.LifeTimeAPIVersion }} \
            --source_env_label ${{ env.AcceptanceEnvironmentLabel }} \
            --destination_env_label ${{ env.PreProductionEnvironmentLabel }} \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Apply values to configuration items to Pre-Production
        run: |
          python3 -m outsystems.pipeline.apply_configuration_values_to_target_env \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --target_env_label "${{ env.PreProductionEnvironmentLabel }}" \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Archive deployment conflicts on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: DeploymentConflicts
          path: ${{ env.ArtifactsFolder }}/DeploymentConflicts

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-dry-run
    environment: prd-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifacts folder
        run: mkdir ${{ env.ArtifactsFolder }}

      - name: Create trigger manifest folder
        run: mkdir -p ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Unstash trigger manifest
        uses: actions/download-artifact@v2
        with:
          name: trigger_manifest
          path: ${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install required packages
        run: pip install -U outsystems-pipeline==${{ env.OSPackageVersion }}

      - name: Deploy latest application to Production
        run: |
          python3 -m outsystems.pipeline.deploy_tags_to_target_env_with_manifest \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --lt_api_version ${{ env.LifeTimeAPIVersion }} \
            --source_env_label ${{ env.PreProductionEnvironmentLabel }} \
            --destination_env_label ${{ env.ProductionEnvironmentLabel }} \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Apply values to configuration items to Production
        run: |
          python3 -m outsystems.pipeline.apply_configuration_values_to_target_env \
            --artifacts "${{ env.ArtifactsFolder }}" \
            --lt_url ${{ env.LifeTimeHostname }} \
            --lt_token ${{ env.AuthorizationToken }} \
            --target_env_label "${{ env.ProductionEnvironmentLabel }}" \
            --manifest_file "${{ env.ArtifactsFolder }}/${{ env.ManifestFolder }}/${{ env.ManifestFile }}"

      - name: Archive deployment conflicts on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: DeploymentConflicts
          path: ${{ env.ArtifactsFolder }}/DeploymentConflicts
